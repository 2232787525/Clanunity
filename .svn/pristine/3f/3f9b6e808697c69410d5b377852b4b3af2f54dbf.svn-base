//
//  CULoginVC.swift
//  Clanunity
//
//  Created by 白bex on 2018/2/1.
//  Copyright © 2018年 DlmTechnology. All rights reserved.
//
import UIKit
import WebKit
import MBProgressHUD

//MARK: - ----------------发布动态
class ChatroomVC: KBaseClanViewController,WKNavigationDelegate,UITextFieldDelegate {

    /// 聊天室model
    var model : ChatRoomModel?
    var wkView : WKWebView!
    var bridge = WebViewJavascriptBridge()
    var ifLoadError = false
    
    var input :  ReviewInputView?
    var jsItem : KNaviBarBtnItem?
    
    override func viewWillAppear(_ animated: Bool) {
        PLGlobalClass.useIQKeyboard(false)
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        PLGlobalClass.useIQKeyboard(true)
    }
    
    deinit{
        NotificationCenter.default.removeObserver(self)
    }
    
    //MARK: - 加载页面 绘制UI
    override func viewDidLoad() {
        super.viewDidLoad()
        
        jsItem = KNaviBarBtnItem.init(frame:  CGRect.init(x: 0, y: KStatusBarHeight, width: 44, height: 44), title: "") { [weak self](sender) in
            self?.jsBackAction()
        }
        
        self.knavigationBar?.title = self.model?.roomname ?? "聊天大厅名称"
        self.makeWebView()
        self.makeJSBridge()
    }
    
    func jsBackAction() {
        
        if ifLoadError == false{
            //调用JS端注册的方法
            bridge.callHandler("goBack", data: nil) {[weak self] (responseData) in
                print(responseData ?? "data为空")
                if responseData is Dictionary<String, Any>{
                    let dic = responseData as! Dictionary<String, String>
                    if (dic["status"] == "1" ){
                        self?.navigationController?.popViewController(animated: true)
                    }
                    if (dic["status"] == "2" ){
                        self?.knavigationBar?.title = self?.model?.roomname ?? "聊天大厅名称"
                        self?.input?.isHidden = false
                    }
                }
            }
        }else{
            self.navigationController?.popViewController(animated: true)
        }
    }
    
    //MARK: - WKNavigationDelegate
    func webView(_ webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!) {
        let hud = MBProgressHUD.showAdded(to: self.view, animated: true)
        hud?.labelText = "正在加入"
        hud?.isUserInteractionEnabled = false
    }
    
    func webView(_ webView: WKWebView, didCommit navigation: WKNavigation!) {
        MBProgressHUD.hideAllHUDs(for: self.view, animated: true)
    }
    func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
        MBProgressHUD.hideAllHUDs(for: self.view, animated: true)
        ifLoadError = false
        self.knavigationBar?.addSubview(jsItem!)
        
        if input == nil{
            self.makeSendView()
        }
    }
    func webView(_ webView: WKWebView, didFailProvisionalNavigation navigation: WKNavigation!, withError error: Error) {
        MBProgressHUD.hideAllHUDs(for: self.view, animated: true)
        ifLoadError = true
    }

    /// 创建web
    func makeWebView() -> Void {
        self.wkView = WKWebView.init(frame: CGRect.init(x: 0, y: KTopHeight, width: KScreenWidth, height: KScreenHeight - KTopHeight))
        self.view.addSubview(self.wkView)
        self.loadWebRequest()
        
//        wkView.scrollView.keyboardDismissMode = .onDrag
//        FauxBarHelper.init().removeInputAccessoryView(webView: self.wkView)

        //键盘弹出时
        NotificationCenter.default.addObserver(self, selector: #selector(keyBoard(notification: )), name:NSNotification.Name.UIKeyboardWillShow, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyBoard(notification: )), name:NSNotification.Name.UIKeyboardWillHide, object: nil)
        
    }
    
    func makeSendView(){
        input =  ReviewInputView.init(frame: CGRect.init(x: 0, y: KScreenHeight-KBottomStatusH - 50, width: KScreenWidth, height: 50))
        input?.inputText.delegate = self
        input?.inputText.returnKeyType = .done
        input?.inputText.placeholder = "请输入内容"
        input?.inputText.borderStyle = .roundedRect
        input?.inputText.height_sd = 32
        input?.inputText.layer.borderWidth = 0.5
        input?.inputText.layer.borderColor = UIColor.textColor3.cgColor

        input?.inputText.removeTarget(input, action: nil, for: .editingChanged)

        input?.inputText.centerY_sd = 25
        
//        input?.inputText.addTarget(self, action: #selector(textchange), for: .editingChanged)

        input?.backgroundColor = UIColor.white
        let line = input?.addBottomLine(color: UIColor.cutLineColor)
        line?.top_sd = 0
        
        input?.send.backgroundColor = UIColor.baseColor
        input?.send.setTitle("发送", for: .normal)
        input?.send.height_sd = 32
        input?.send.width_sd = 46
        input?.send.right_sd = KScreenWidth - 12
        input?.send.centerY_sd = 25

        input?.send.setTitleColor(UIColor.white, for: .normal)
        input?.inputText.width_sd = (input?.send.left_sd)!-5-12
        
        self.view.addSubview(input!)
        
        
        input?.send.handleEventTouchUpInside {[weak self] in
            //调用JS端注册的方法
            if ((self?.input?.inputText.text?.count ?? 0) > 0){
                self?.bridge.callHandler("sendMsg", data: ["text":self?.input?.inputText.text]) { (responseData) in
                }
                self?.input?.inputText.text = ""
//                self?.input?.inputText.resignFirstResponder()
            }
        }
    }
    
    func textchange(){
        
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        self.input?.inputText.resignFirstResponder()
        return true
    }
    
    //键盘的出现
    func keyBoard(notification: Notification){
        //获取userInfo
        let kbInfo = notification.userInfo
        //获取键盘的size
        let kbRect = (kbInfo?[UIKeyboardFrameEndUserInfoKey] as! NSValue).cgRectValue
        //键盘的y偏移量
        //键盘弹出的时间
        let duration = kbInfo?[UIKeyboardAnimationDurationUserInfoKey] as!Double

        //界面偏移动画
        UIView.animate(withDuration: duration) {[weak self] in
            if kbRect.origin.y == KScreenHeight{
                self?.input?.bottom_sd = kbRect.origin.y - KBottomStatusH
            }else{
                self?.input?.bottom_sd = kbRect.origin.y
            }
        }
    }

    /// 创建web
    func makeJSBridge() -> Void {
        //开启日志
        WebViewJavascriptBridge.enableLogging()
        
        //给Objc与JS建立桥梁
        self.bridge = WebViewJavascriptBridge.init(forWebView: self.wkView)
        self.bridge.setWebViewDelegate(self)
        
        self.bridge.registerHandler("gotoUserInfoVC") {[weak self] (data, responseCallback) in
            print(data ?? "data为空")
            let dic = data as! Dictionary<String, String>
            if dic["username"] == UserServre.shareService.userModel.username{
                    let vc = MyInfoVC.init()
                    self?.navigationController?.pushViewController(vc, animated: true)
            }else{
                let vc = StrangerOrFriendVC.init()
                vc.username = dic["username"]
                vc.notPOPWhenDelete = true
                self?.navigationController?.pushViewController(vc, animated: true)
            }
        }
        
        //跳转成员列表时 刷新导航栏title
        self.bridge.registerHandler("memberIconClick") {[weak self] (data, responseCallback) in
            self?.knavigationBar?.title =  "在线成员"
            self?.input?.isHidden = true
        }
    }

    
    /// 加载webView
    func loadWebRequest() -> Void {
        DispatchQueue.global().async { [weak self] in
            
            let string = "http://192.168.1.88:8020/H5/h5_websocket/index.html?username=18235168469&roomId=10000"
            
//            let string = ClanAPI.H5UserName + "/h5_websocket/index.html?username=" + UserServre.shareService.userModel.username +  "&roomId=" + (self?.model?.areaid ?? "123456")

            let request = NSURLRequest.init(url: URL.init(string: string)!)
            DispatchQueue.main.async {
                self?.wkView.load(request as URLRequest)
            }
        }
        
        //本地的html网页
//        let filePath = Bundle.main.path(forResource: "test", ofType: "html")
//        var htmlString = ""
//        do {
//            htmlString = try String.init(contentsOfFile: filePath!, encoding: String.Encoding.utf8)
//        }catch{ }
//        let url = URL.init(string: filePath!)
//        wkView.loadHTMLString(htmlString, baseURL: url)
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
    }
}

final class FauxBarHelper: NSObject {
    @objc var inputAccessoryView: AnyObject? { return nil }
    
    func removeInputAccessoryView(webView: WKWebView) {
        var targetView: UIView? = nil
        
        for view in webView.scrollView.subviews {
            if String(describing: type(of: view)).hasPrefix("WKContent") {
                targetView = view
            }
        }
        
        guard let target = targetView else { return }
        
        let noInputAccessoryViewClassName = "\(target.superclass!)_NoInputAccessoryView"
        var newClass: AnyClass? = NSClassFromString(noInputAccessoryViewClassName)
        if newClass == nil {
            let targetClass: AnyClass = object_getClass(target)!
            newClass = objc_allocateClassPair(targetClass, noInputAccessoryViewClassName.cString(using: String.Encoding.ascii)!, 0)
        }
        
        let originalMethod = class_getInstanceMethod(FauxBarHelper.self, #selector(getter: FauxBarHelper.inputAccessoryView))
        class_addMethod(newClass!.self, #selector(getter: FauxBarHelper.inputAccessoryView), method_getImplementation(originalMethod!), method_getTypeEncoding(originalMethod!))
        object_setClass(target, newClass!)
    }
}


