//
//  CULoginVC.swift
//  Clanunity
//
//  Created by 白bex on 2018/2/1.
//  Copyright © 2018年 DlmTechnology. All rights reserved.
//

import UIKit
import MBProgressHUD
import MJRefresh

//MARK: - ----------------同宗活动列表页
class ClubActivity: BaseTabVC,UITableViewDataSource {
    

    var dynamicArr = [ActivityModel]() //动态Arr
//    let emptyView : EmptySwiftView? = nil
    
    override lazy var emptyView: EmptySwiftView = {
        let tempView = EmptySwiftView.showEmptyView(emptyPicName: "empty_activity", describe: "君暂无活动，赶快发布吧！")
        tempView.centerX_sd = KScreenWidth/2.0
        return tempView
    }()
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        GlobalClass.single_event(eventName: CUKey.UM_activity)
        
        self.knavigationBar?.title = "同宗活动"
        self.knavigationBar?.rightBarBtnItem = KNaviBarBtnItem.init(frame:  CGRect.init(x: 0, y: KStatusBarHeight, width: 44, height: 44), title: "发布") { [weak self](sender) in
                self?.gotoPublicClick()
        }
        self.maketableView()
    }

    //MARK: - tableView
    override func maketableView(){
        super.maketableView()
        
        tableView.height_sd = KScreenHeight-KTopHeight
        tableView.dataSource=self
        
        let view = UIView.init(frame: CGRect.init(x: 0, y: 0, width: KScreenWidth, height: 0.01))
        tableView.tableHeaderView = view
        
        emptyView.top_sd = KScreenHeight/2 - 150
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return dynamicArr.count
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        var cell = tableView.dequeueReusableCell(withIdentifier: "cell") as? ActivityCell
        if (!(cell != nil)){
            cell = ActivityCell.init(style: .default, reuseIdentifier: "cell")
        }
        cell?.model = dynamicArr[indexPath.row]
        cell?.row = indexPath.row
        return cell!
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return ActivityCell.getCellHeigh(model: dynamicArr[indexPath.row])
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 0.01
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        let info = ActivityInfo.init()
        info.model = self.dynamicArr[indexPath.row]
        self.navigationController?.pushViewController(info, animated: true)
    }
    
    override func emptyShow(show:Bool){
        if show{
            footerview.height_sd = KScreenHeight/2 + 100
        }else{
            footerview.height_sd = 0
        }
    }
    
    // MARK: - Https网络请求
    override func requestforList(){
        ClanAPI.requestForActivityList(pagenum: pno, pagesize: pnu) { (result) in
            self.tableView.mj_header.endRefreshing()
            self.tableView.mj_footer.endRefreshing()
            
            if (result.status == "200"){
                if ((result.data != nil) && (result.data is Dictionary<String,Any>)){
                    let dic = result.data as! Dictionary<String,Any>
                    
                    let resArr = ActivityModel.mj_objectArray(withKeyValuesArray: dic["list"]) as! [ActivityModel]
                    
                    if ((resArr.count) < (self.pnu)) {
                        self.tableView.mj_footer.isHidden = true
                    }else{
                        self.tableView.mj_footer.isHidden = false
                    }
                    if ((resArr.count) > 0){
                        if( (self.pno) > 1){
                            self.dynamicArr = self.dynamicArr + resArr
                        }else{
                            self.dynamicArr = resArr
                        }
                    }else{
                        if ( (self.pno) > 1){
                            self.pno = (self.pno) - 1
                        }
                    }
                    self.emptyShow(show: false)
                    self.tableView.reloadData()
                }else{
                    self.emptyShow(show: true)
                    self.tableView.reloadData()
                }
            }else{
                if self.pno==1{
                    self.dynamicArr.removeAll()
                    self.tableView.reloadData()
                    self.emptyShow(show: true)
                    self.tableView.mj_footer.isHidden = true
                }else{
                    self.emptyShow(show: false)
                }
            }
        }
    }
    
    func gotoPublicClick() {
        
        let publicVC = publicActivity.init()
        publicVC.lastVC = self
        self.navigationController?.pushViewController(publicVC, animated: true)
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
    }
}


//MARK: - ----------------同宗活动cell
class ActivityCell: UITableViewCell {
    
    var row = 0
    /// 点赞按钮
    var likeBtn = UIButton()
    /// 分享按钮
    var shareBtn = UIButton()
    /// 评论按钮
    var talkBtn = UIButton()
    /// 发布者
    var name = UILabel()
    /// 标题
    var title = UILabel()
    /// 图片1
    var image1 = UIImageView()
    /// 图片1
    var endLab = UILabel()
    
    var model : ActivityModel?{
        didSet {
            
            if (model?.isend == true) {
                self.endLab.isHidden = false
            }else{
                self.endLab.isHidden = true
            }
            
            let attrString = NSMutableAttributedString.init(string: "主办方：", attributes: [NSForegroundColorAttributeName:UIColor.textColor1])
            
            let str = (model?.clubname ?? "") + (model?.realname ?? "")
            attrString.append(NSAttributedString.init(string: (model?.business ?? str) , attributes: [NSForegroundColorAttributeName:UIColor.textColor5]))
            self.name.attributedText = attrString;
    
            self.title.text = model?.title
            
            self.talkBtn.setTitle(model?.commentcount, for: .normal)
            self.shareBtn.setTitle(model?.sharecount, for: .normal)
            self.likeBtn.setTitle(String(describing: model!.praisecount), for: .normal)
            
            PLGlobalClass.paragraphForlabel(self.title, lineSpace: 5)
            self.title.lineBreakMode = .byTruncatingTail
            title.height_sd = ActivityCell.gettextHei(model:model!)
            
            self.name.sizeToFit()
            self.name.height_sd = F_I6(place: 46)
            
            let imgUrl = NSString.formatImageUrl(with: model?.themeimg)
            self.image1.sd_setImage(with: URL.init(string: imgUrl!), placeholderImage: UIImage.init(named: ImageDefault.imagePlace))
        
            //视频
            self.image1.top_sd = self.title.bottom_sd  + 8
            self.image1.width_sd = F_I6(place: 351)
            self.image1.height_sd = F_I6(place: 133)
            
            name.top_sd = self.image1.bottom_sd
            shareBtn.centerY_sd = name.centerY_sd
            likeBtn.centerY_sd = name.centerY_sd
            talkBtn.centerY_sd = name.centerY_sd
            
            likeBtn.handleEventTouchUpInside {
                if self.likeBtn.isSelected{
                    print("取消赞")
                    ClanAPI.requestForCancelpraise(targetid: (self.model?.id)!, targettype: "3", result: { (result) in
                        if (result.status == "200"){
                            self.likeBtn.isSelected = false
                            self.model?.praise = "0"
                            self.model!.praisecount = self.model!.praisecount-1
                            self.likeBtn.setTitle( String(self.model!.praisecount), for: .normal)
                        }else{
                        }
                    })
                }else{
                    print("点赞")
                    ClanAPI.requestForSubmitpraise(targetid: (self.model?.id)!, targettype: "3", result: { (result) in
                        if (result.status == "200"){
                            self.model?.praise = "1"
                            self.model!.praisecount = self.model!.praisecount+1
                            self.likeBtn.isSelected = true
                            self.likeBtn.setTitle( String(self.model!.praisecount), for: .normal)
                            
                        }else{
                        }
                    })
                }
            }
            if model?.praise == "1"{
                self.likeBtn.isSelected = true
            }else{
                self.likeBtn.isSelected = false
            }
        }
    }
    
    class func gettextHei(model : ActivityModel)-> (CGFloat){
        return PLGlobalClass.getTextHeight(withStr: model.title, labWidth: KScreenWidth - 12 * 2, fontSize:UIFont.boldSystemFont(ofSize:F_I6(place:15)).pointSize, numberLines: 0, lineSpacing: 5)
    }
    
    class func getCellHeigh(model : ActivityModel) -> (CGFloat){
        return F_I6(place: 198) + self.gettextHei(model:model)
    }
    
    override init(style: UITableViewCellStyle, reuseIdentifier: String?) {
        super.init(style: style, reuseIdentifier: reuseIdentifier)
        
        title = UILabel.init(frame: CGRect.init(x: 12, y: 10, width: KScreenWidth - 12 * 2, height:F_I6(place: 51)))
        title.font = UIFont.boldSystemFont(ofSize:F_I6(place:15))
        title.textColor = UIColor.textColor1
        title.isUserInteractionEnabled = false
        title.numberOfLines = 2
        self.contentView.addSubview(title)
        
        image1 = UIImageView.init(frame: CGRect.init(x: title.left_sd, y: title.bottom_sd, width: F_I6(place: 351), height:F_I6(place: 133)))
        image1.contentMode = .scaleAspectFill
        image1.clipsToBounds = true
        self.contentView.addSubview(image1)
        
        endLab = UILabel.init(frame: CGRect.init(x: title.left_sd, y: title.bottom_sd, width: F_I6(place: 351), height:F_I6(place: 133)))
        endLab.backgroundColor = UIColor.init(red: 0, green: 0, blue: 0, alpha: 0.3)
        endLab.text = "活动已结束"
        endLab.textAlignment = .center
        endLab.font = UIFont.boldSystemFont(ofSize:F_I6(place:18))
        endLab.textColor = UIColor.white
        self.contentView.addSubview(endLab)
        
        name = UILabel.init(frame: CGRect.init(x: title.left_sd, y: image1.bottom_sd, width: 50, height: F_I6(place: 46)))
        name.font = UIFont.systemFont(ofSize: 14)
        name.textColor = UIColor.textColor1
        self.contentView.addSubview(name)
        
        shareBtn = UIButton.init(frame: CGRect.init(x: KScreenWidth-10-F_I6(place:60*3 ) , y: image1.bottom_sd, width:F_I6(place: 60), height:F_I6(place: 32)))
        self.contentView.addSubview(shareBtn)
        shareBtn.setImage(UIImage.init(named: "dyna_2_share"), for: .normal)
        shareBtn.setTitleColor(UIColor.textColor2, for: .normal)
        shareBtn.titleLabel?.font = UIFont.systemFont(ofSize:F_I6(place:12))
        PLGlobalClass.setBtnStyle(shareBtn, style: .imageLeft, space: 2)
        shareBtn.isUserInteractionEnabled = false
        
        talkBtn = UIButton.init(frame: CGRect.init(x: KScreenWidth-10-F_I6(place:60*2 ), y: image1.bottom_sd, width:F_I6(place: 60), height:F_I6(place: 32)))
        self.contentView.addSubview(talkBtn)
        talkBtn.setImage(UIImage.init(named: "dyna_1_talk"), for: .normal)
        talkBtn.setTitleColor(UIColor.textColor2, for: .normal)
        talkBtn.titleLabel?.font = UIFont.systemFont(ofSize: F_I6(place:12))
        PLGlobalClass.setBtnStyle(talkBtn, style: .imageLeft, space: 2)
        talkBtn.isUserInteractionEnabled = false
        
        likeBtn = UIButton.init(frame: CGRect.init(x: KScreenWidth-10-F_I6(place:60), y: image1.bottom_sd, width: F_I6(place: 60), height: F_I6(place: 32)))
        self.contentView.addSubview(likeBtn)
        likeBtn.setImage(UIImage.init(named: "dyna_3_like"), for: .normal)
        likeBtn.setImage(UIImage.init(named: "like_brown"), for: .selected)

        likeBtn.setTitleColor(UIColor.textColor2, for: .normal)
        likeBtn.titleLabel?.font = UIFont.systemFont(ofSize: F_I6(place:12))
        PLGlobalClass.setBtnStyle(likeBtn, style: .imageLeft, space: 2)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
}



//MARK: - ----------------宗亲动态model
class ActivityModel: KBaseModel {
    
    var themeimg : String = ""    //封面图
    var gender : String = ""      //性别
    var headimg : String = ""     //头像
    var clubid : String = ""      //姓氏id
    var isapp : Bool = false      //是否是从手机端发布
    var starttime : String = ""   //开始时间
    var endtime : String = ""     //结束时间
    var signupstarttime : String = ""   //报名开始时间
    var signupendtime : String = ""     //报名结束时间
    
    var isend : Bool = false   //是否已结束
    var issignup : Bool = false   //是否已报名
    
    /// 标题
    var title : String = ""
    var userid : String = "" //id
    /// 内容
    var content : String = ""
    var attachid : String = ""      //附件ID
    var attachpath : String = ""    //附件地址
    var signupusers = [SignupUserModel]()//已报名的用户
    var id : String = "" //id
    /// 动态图片
    var imgs = [String]()
    var business : String = ""  //主办方
    
    var clubname : String = "" //姓
    var realname : String = "" //名
    var persons : String = ""  //报名人数
    
    /// 点赞数
    var praise : String = ""
    /// 点赞数
    var praisecount : NSInteger = 0
    /// 评论数
    var commentcount : String = ""
    /// 分享数
    var sharecount : String = ""
    /// 创建日期
    var created : String = ""
    var updated : String = ""
    var status : String = ""
    var username : String = ""
    var tAccount : Dictionary<String, Any>?
    var address : String = ""
    
    override static func mj_objectClassInArray() -> [AnyHashable : Any]! {
//            return ["imgs": String.self]
        return ["signupusers": SignupUserModel.self]
    }
    
    //    override static func mj_objectClassInArray() -> [AnyHashable : Any]! {
    //        return ["imgs": String.self]
    ////        return ["imgs": imgModel.self]
    //    }
}
